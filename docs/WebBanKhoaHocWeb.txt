Xây dựng website bán khóa học lập trình web bằng Laravel

Mô tả hệ thống:

Hệ thống bán khóa học lập trình web cho phép quản lý người dùng, nội dung khóa học, đơn hàng, thanh toán trực tuyến, và tiến độ học tập của học viên.

Hệ thống có 3 loại tài khoản chính là quản trị viên, giảng viên, và học viên. Mỗi người dùng được lưu trong bảng users kèm thông tin cá nhân và vai trò tương ứng.

Giảng viên có thể tạo nhiều khóa học khác nhau, mỗi khóa học bao gồm thông tin tên khóa, mô tả, hình ảnh minh họa, giá bán và được lưu vào bảng courses. Mỗi khóa học được chia thành nhiều chương (section) để sắp xếp nội dung theo từng phần, và mỗi chương chứa nhiều bài học (lesson).

Mỗi bài học là một video được lưu dưới dạng đường dẫn YouTube, kèm tiêu đề, thời lượng và vị trí trong chương. Các thông tin này được lưu vào bảng sections và lessons để quản lý cấu trúc nội dung một cách rõ ràng.

Học viên có thể đăng ký tài khoản và lựa chọn khóa học muốn mua. Khi đặt mua, hệ thống tạo một đơn hàng trong bảng orders, kèm danh sách các khóa học trong bảng order_items. Học viên sẽ được chuyển tới cổng thanh toán trực tuyến (VNPay, MoMo, PayPal…) để hoàn tất thanh toán. Thông tin thanh toán như phương thức, số tiền, mã giao dịch và trạng thái sẽ được lưu trong bảng payments.

Khi thanh toán thành công, hệ thống sẽ ghi nhận học viên vào bảng enrollments (hoặc tương đương) để xác định học viên có quyền truy cập nội dung của khóa học đó. Học viên có thể vào xem danh sách chương và bài học, nhấn vào bài học để xem video trực tiếp từ YouTube.

Trong quá trình học, hệ thống theo dõi tiến độ của từng học viên. Khi học viên hoàn thành một bài học, hệ thống cập nhật bảng user_progress để đánh dấu trạng thái hoàn thành (is_completed), thời gian hoàn thành (completed_at). Điều này giúp hiển thị phần trăm hoàn thành khóa học và quản lý tiến trình học tập của từng học viên.

Toàn bộ quá trình từ tạo khóa học → sắp xếp nội dung → đặt hàng → thanh toán → học → theo dõi tiến độ đều được quản lý chặt chẽ thông qua các bảng dữ liệu trong hệ thống. Hệ thống hỗ trợ nhiều hình thức thanh toán, dễ dàng mở rộng thêm các tính năng như đánh giá, bình luận, quiz hoặc chứng chỉ hoàn thành khóa học.



Database:

CREATE DATABASE CourseManagment
USE CourseManagment

CREATE TABLE users (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(150) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  role ENUM('admin','instructor','student') DEFAULT 'student',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE courses (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  instructor_id BIGINT NOT NULL,
  title VARCHAR(200) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  thumbnail VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (instructor_id) REFERENCES users(id)
);


CREATE TABLE sections (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  course_id BIGINT NOT NULL,
  title VARCHAR(200) NOT NULL,
  position INT NOT NULL,
  FOREIGN KEY (course_id) REFERENCES courses(id)
);


CREATE TABLE lessons (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  section_id BIGINT NOT NULL,
  title VARCHAR(200) NOT NULL,
  youtube_url VARCHAR(255) NOT NULL,
  duration INT,  -- thời lượng video (giây)
  position INT NOT NULL,
  FOREIGN KEY (section_id) REFERENCES sections(id)
);


CREATE TABLE orders (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  status ENUM('pending','paid','cancelled') DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);


CREATE TABLE order_items (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  order_id BIGINT NOT NULL,
  course_id BIGINT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (order_id) REFERENCES orders(id),
  FOREIGN KEY (course_id) REFERENCES courses(id)
);


CREATE TABLE payments (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  order_id BIGINT NOT NULL,
  method ENUM('vnpay','momo','paypal','stripe') NOT NULL,
  amount DECIMAL(10,2) NOT NULL,
  transaction_id VARCHAR(100),
  status ENUM('pending','success','failed') DEFAULT 'pending',
  paid_at TIMESTAMP NULL,
  FOREIGN KEY (order_id) REFERENCES orders(id)
);

CREATE TABLE user_progress (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT NOT NULL,
  lesson_id BIGINT NOT NULL,
  is_completed BOOLEAN DEFAULT FALSE,
  completed_at TIMESTAMP NULL,
  UNIQUE (user_id, lesson_id),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (lesson_id) REFERENCES lessons(id)
);

